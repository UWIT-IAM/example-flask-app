name: Release on push to `main`
on:
  push:
    branches:
      - main
    paths:
      - pyproject.toml
  workflow_dispatch:

jobs:
  publish-if-new-version:
    if: github.repository != 'UWIT-IAM/example-flask-app'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      # Only publish if the version has changed; otherwise, we would be
      # re-publishing existing stuff without updating the version, and that
      # could cause problems.
      - name: Check if the change should be published
        run: |
          set -x
          publishable=false
          diff=$(git diff HEAD:pyproject.toml HEAD~1:pyproject.toml) || exit 0
          echo "$diff" | grep '+version ='
          if [[ "$?" -ne 0 ]]
          then
            echo 'Not publishable - skipping'
            exit 1
          fi

      - uses: actions/setup-python@v4
        with:
          python-version-file: pyproject.toml

      - name: Install and configure poetry
        run: |
          pipx install poetry
          poetry config virtualenvs.create false

      - name: Install package
        run: poetry install

      - name: Install jq for fingerprinter
        run: sudo apt-get -y install jq

      - name: Auth to Google Cloud
        # important! this 'auth' is referenced as `steps.auth` on the next job
        id: auth
        # https://github.com/google-github-actions/auth#authenticating-via-service-account-key-json-1
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.MCI_GCLOUD_AUTH_JSON }}'
          token_format: 'access_token'

      - name: Auth to Google Artifact Registry
        # https://github.com/google-github-actions/auth#authenticating-to-container-registry-and-artifact-registry
        # requires role: roles/iam.serviceAccountTokenCreator
        run: |-
          echo '${{ steps.auth.outputs.access_token }}' | docker login -u oauth2accesstoken --password-stdin https://us-docker.pkg.dev
      - name: Create and push release image; deploy to dev
        run: |
          # requires role: roles/artifactregistry.createOnPushWriter
          ./scripts/build.sh --release $(poetry version -s) --cache --deploy dev
