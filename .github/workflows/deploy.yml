on:
  push:
    branches:
      - dry-run-deploy
  workflow_dispatch:
    inputs:
      cluster:
        description: cluster. Choose from dev/eval/prod.
        default: eval
        required: true
      rfc:
        description: >
          rfc. The RFC number (e.g., '0724') associated with this
          deployment. Required when deploying to prod.
      version:
        description: >
          version. The version to deploy (e.g., '1.2.3'). If not provided,
          the most recent release candidate will be used (eval will source from dev,
          prod will source from eval).

env:
  SLACK_BOT_TOKEN: ${{ secrets.ACTIONS_SLACK_BOT_TOKEN }}
  DRY_RUN: false
  STEP_SCRIPTS: ${{ github.workspace }}/.github/steps/deploy
  target_cluster: dev

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v3
      - uses: abatilo/actions-poetry@v2.1.4
      - if: github.event.inputs.cluster == 'prod'
        run: |
          if ! test -n "${{ github.event.inputs.rfc }}"
          then
            echo "::error::An RFC must be referenced when deploying to prod!"
            exit 1
          fi
      - if: github.event.inputs.version
        run: echo "target_version=${{ github.event.inputs.version }}" >> $GITHUB_ENV
      - run: |
          sudo apt-get -y install jq
          poetry install
      - uses: UWIT-IAM/actions/configure-gcloud-docker@0.1
        with:
          gcloud-token: ${{ secrets.GCR_TOKEN }}
      # When performing an automated dry run from a push, we will be running using
      # the basic default command of: ./deploy-sh --dry-run --target-cluster dev
      - name: Update env with promotion version
        # This runs as a separate step so that the entrypoint (manual vs. auto)
        # doesn't matter.
        run: |
          source ./scripts/globals.sh
          target_version=$(get_promotion_version ${{ github.event.inputs.cluster }})
          echo "target_version=${target_version}" >> $GITHUB_ENV
        if: '! env.target_version'

      - run: |
          echo "::notice::Deploying example-flask-app version ${{ env.target_version }} to ${{ github.event.inputs.cluster }}"
          ./scripts/build.sh \
            --deploy ${{ inputs.cluster }} \
            --dversion ${{ env.target_version }} ${{ env.DRY_RUN && '--ddry' || '' }}
        id: deploy
        name: Deploy version ${{ env.target_version }}
